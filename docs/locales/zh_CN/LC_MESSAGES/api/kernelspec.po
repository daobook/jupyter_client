# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Development Team
# This file is distributed under the same license as the jupyter_client
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jupyter_client 7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-09 21:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/kernelspec.rst:2
msgid "kernelspec - discovering kernels"
msgstr ""

#: ../../api/kernelspec.rst:4
msgid ":ref:`kernelspecs`"
msgstr ""

#: ../../api/kernelspec.rst:12
msgid "The list of arguments to start this kernel."
msgstr ""

#: ../../api/kernelspec.rst:16
msgid ""
"A dictionary of extra environment variables to declare, in addition to "
"the current environment variables, when launching this kernel."
msgstr ""

#: ../../api/kernelspec.rst:21
msgid "The name to display for this kernel in UI."
msgstr ""

#: ../../api/kernelspec.rst:25
msgid ""
"The name of the language the kernel implements, to help with picking "
"appropriate kernels when loading notebooks."
msgstr ""

#: ../../api/kernelspec.rst:30
msgid ""
"Additional kernel-specific metadata; clients can use this as needed, for "
"instance to aid in kernel selection and filtering."
msgstr ""

#: ../../api/kernelspec.rst:33
msgid ""
"Metadata added here should be namespaced for the tool reading and writing"
" that metadata. Concretely, if you're adding a new field called "
":code:`supported_versions` which your tool recognizes, then you should "
"add it as :code:`\"mytool\": {\"supported_versions\": [1, 2]}`, **not** "
"as a top-level field called :code:`supported_versions`."
msgstr ""

#: ../../api/kernelspec.rst:41
msgid "The path to the directory with this kernel's resources, such as icons."
msgstr ""

#: jupyter_client.kernelspec.KernelSpec.to_json:1 of
msgid "Serialise this kernelspec to a JSON object."
msgstr ""

#: jupyter_client.kernelspec.KernelSpec.to_json:3 of
msgid "Returns a string."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.find_kernel_specs:1 of
msgid "Returns a dict mapping kernel names to resource directories."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.get_all_specs:1 of
msgid "Returns a dict mapping kernel names to kernelspecs."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.get_all_specs:3 of
msgid "Returns a dict of the form::"
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.get_kernel_spec:1 of
msgid "Returns a :class:`KernelSpec` instance for the given kernel_name."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.get_kernel_spec:3 of
msgid "Raises :exc:`NoSuchKernel` if the given kernel name is not found."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.install_kernel_spec:1 of
msgid "Install a kernel spec by copying its directory."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.install_kernel_spec:3 of
msgid ""
"If ``kernel_name`` is not given, the basename of ``source_dir`` will be "
"used."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.install_kernel_spec:6 of
msgid ""
"If ``user`` is False, it will attempt to install into the systemwide "
"kernel registry. If the process does not have appropriate permissions, an"
" :exc:`OSError` will be raised."
msgstr ""

#: jupyter_client.kernelspec.KernelSpecManager.install_kernel_spec:10 of
msgid ""
"If ``prefix`` is given, the kernelspec will be installed to "
"PREFIX/share/jupyter/kernels/KERNEL_NAME. This can be sys.prefix for "
"installation inside virtual or conda envs."
msgstr ""

#: ../../api/kernelspec.rst:59
msgid "The name of the kernel which was requested."
msgstr ""

#: ../../api/kernelspec.rst:65
msgid ""
"These methods from :class:`KernelSpecManager` are exposed as functions on"
" the module as well; they will use all the default settings."
msgstr ""

